Import-Module ActiveDirectory
Import-Module ImportExcel

# Load Excel with columns: GroupName | Server
$groups = Import-Excel -Path "groups.xlsx"
$allMembers = @()

function Expand-ADGroup {
    param (
        [string]$GroupDN,
        [string]$Server,
        [string]$RootGroup,
        [string]$ParentGroup,
        [hashtable]$seenGroups
    )

    if ($seenGroups.ContainsKey($GroupDN)) { return }
    $seenGroups[$GroupDN] = $true

    # Get member list via direct LDAP attribute (to avoid Get-ADGroupMember failures)
    $groupObj = Get-ADObject -Identity $GroupDN -Server $Server -Properties member -ErrorAction SilentlyContinue

    if (-not $groupObj) {
        $allMembers += ,([PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = $GroupDN
            ObjectClass       = 'group'
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $GroupDN
            Note              = "‚ùå Cannot read group"
        })
        return
    }

    foreach ($memberDN in $groupObj.member) {
        $entry = [PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = ''
            ObjectClass       = ''
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $memberDN
            Note              = ''
        }

        $obj = Get-ADObject -Identity $memberDN -Server $Server -Properties objectClass -ErrorAction SilentlyContinue

        if (-not $obj) {
            $entry.Note = "‚ö†Ô∏è Could not resolve object"
            $allMembers += ,$entry
            continue
        }

        $class = $obj.objectClass[-1]
        $entry.ObjectClass = $class
        $entry.Name = $obj.Name

        switch ($class) {
            'user' {
                $user = Get-ADUser -Identity $memberDN -Server $Server -Properties EmailAddress -ErrorAction SilentlyContinue
                if ($user) {
                    $entry.SamAccountName = $user.SamAccountName
                    $entry.Email = $user.EmailAddress
                } else {
                    $entry.Note = "‚ö†Ô∏è Could not get user info"
                }
                $allMembers += ,$entry
            }

            'group' {
                $entry.Note = "‚úÖ Nested group"
                $allMembers += ,$entry
                Expand-ADGroup -GroupDN $memberDN -Server $Server -RootGroup $RootGroup -ParentGroup $obj.Name -seenGroups $seenGroups
            }

            default {
                # Cyber accounts (ForeignSecurityPrincipal), computer, etc.
                $entry.Note = "‚ö†Ô∏è Non-user/group object ($class)"
                $allMembers += ,$entry
            }
        }
    }
}

# Loop through input Excel
foreach ($row in $groups) {
    $groupName = $row.GroupName
    $server = $row.Server

    if (-not $groupName -or -not $server) {
        Write-Warning "‚ö†Ô∏è Skipping row with missing GroupName or Server"
        continue
    }

    Write-Host "`nüîç Processing root group '$groupName' on '$server'..."

    $groupObj = Get-ADGroup -Identity $groupName -Server $server -Properties DistinguishedName -ErrorAction SilentlyContinue

    if (-not $groupObj) {
        Write-Warning "‚ùå Could not resolve group '$groupName' to DN"
        continue
    }

    $groupDN = $groupObj.DistinguishedName
    $seenGroups = @{}
    Expand-ADGroup -GroupDN $groupDN -Server $server -RootGroup $groupName -ParentGroup $groupName -seenGroups $seenGroups
}

# Export results
$allMembers | Export-Csv -Path "AD_Recursive_Members_WithCyberAccounts.csv" -NoTypeInformation
Write-Host "`n‚úÖ Export complete: AD_Recursive_Members_WithCyberAccounts.csv"