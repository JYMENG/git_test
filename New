$GroupName = "Hr Team"                  # <-- use exactly as shown in Excel
$ServerName = "yourdc.domain.com"       # <-- replace with actual AD server (DC)

$Visited = New-Object 'System.Collections.Generic.HashSet[string]'
$Results = @()

function Write-DebugLog {
    param([string]$msg)
    $ts = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$ts] $msg"
}

function Get-ADGroupRecursiveMembers {
    param (
        [string]$GroupDN,
        [string]$Server,
        [System.Collections.Generic.HashSet[string]]$VisitedGroups,
        [string[]]$PathSoFar
    )

    $output = @()

    if ($VisitedGroups.Contains($GroupDN)) {
        Write-DebugLog "Already visited: $GroupDN"
        return $output
    }

    $VisitedGroups.Add($GroupDN)
    Write-DebugLog "Getting members of: $GroupDN on $Server"

    try {
        $group = Get-ADGroup -Identity $GroupDN -Server $Server -Properties Members
    } catch {
        Write-Warning "Failed to get group: $GroupDN - $_"
        return $output
    }

    foreach ($memberDN in $group.Members) {
        try {
            $member = Get-ADObject -Identity $memberDN -Server $Server -Properties objectClass,sAMAccountName,mail
        } catch {
            Write-Warning "Skipping inaccessible member: $memberDN"
            continue
        }

        if ($member.objectClass -eq "group") {
            Write-DebugLog "Nested group found: $memberDN"
            $output += Get-ADGroupRecursiveMembers -GroupDN $memberDN -Server $Server -VisitedGroups $VisitedGroups -PathSoFar ($PathSoFar + $GroupDN)
        } elseif ($member.objectClass -eq "foreignSecurityPrincipal") {
            Write-Warning "ForeignSecurityPrincipal (FSP) skipped: $memberDN"
        } else {
            Write-DebugLog "User found: $($member.sAMAccountName) ($memberDN)"
            $output += [pscustomobject]@{
                GroupPath      = ($PathSoFar + $GroupDN) -join " -> "
                MemberDN       = $memberDN
                ObjectType     = $member.objectClass
                sAMAccountName = $member.sAMAccountName
                Email          = $member.mail
            }
        }
    }

    return $output
}

try {
    $RootGroup = Get-ADGroup -Identity $GroupName -Server $ServerName
    $Results = Get-ADGroupRecursiveMembers -GroupDN $RootGroup.DistinguishedName -Server $ServerName -VisitedGroups $Visited -PathSoFar @()
} catch {
    Write-Error "Could not get root group: $_"
}

Write-Host "`n============== RESULTS =============="
Write-Host "Total members found: $($Results.Count)"
$Results | Format-Table -AutoSize