import sqlite3
import pandas as pd

# File paths
file_q = "C:/path/to/file_q.csv"
file_w = "C:/path/to/file_w.csv"
sqlite_db = "C:/path/to/database.db"

# Connect to SQLite database
conn = sqlite3.connect(sqlite_db)
cursor = conn.cursor()

# Function to dynamically create table based on CSV headers
def create_table_from_csv(file_path, table_name):
    # Read the first row of the CSV to get column names
    df = pd.read_csv(file_path, nrows=1)  # Read only the first row for header
    columns = df.columns.tolist()
    
    # Create a table schema
    columns_schema = ', '.join([f"{col} TEXT" for col in columns])
    
    # Create the table dynamically
    create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} ({columns_schema});"
    cursor.execute(create_table_query)
    print(f"Table {table_name} created with columns: {columns}")

# Create table for file_q
create_table_from_csv(file_q, "file_q")

# Create table for file_w
create_table_from_csv(file_w, "file_w")

# Read full CSV files and insert into tables
df_q = pd.read_csv(file_q)
df_w = pd.read_csv(file_w)

df_q.to_sql('file_q', conn, if_exists='replace', index=False)
df_w.to_sql('file_w', conn, if_exists='replace', index=False)

# Perform inner join and convert datetime column
query = '''
SELECT f1.key1, f1.column1, f1.column2, 
       f2.key2, f2.columnA, f2.columnB, 
       datetime(f2.datetime_col) as datetime_col
FROM file_q f1
INNER JOIN file_w f2
ON f1.key1 = f2.key2
ORDER BY f1.key1 DESC, datetime(f2.datetime_col) ASC;
'''

# Execute the query and fetch results
result = pd.read_sql_query(query, conn)

# Save the result to CSV
output_file = "C:/path/to/output.csv"
result.to_csv(output_file, index=False)

print("Merge and export complete. Output saved at:", output_file)

# Close SQLite connection
conn.close()