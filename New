import numpy as np

def calculate_net_workdays_numpy(df):
    """
    Calculates net workdays based on key combination K1, K2 in a sorted DataFrame 
    using numpy.busday_count.

    Args:
        df: Sorted DataFrame with columns 'K1', 'K2', 'D1', 'D2', 'D3'.

    Returns:
        DataFrame with an additional column 'Net_Workdays'.
    """

    df['Net_Workdays'] = 0

    for key, group in df.groupby(['K1', 'K2']):
        if len(group) == 1:
            # If only one record, calculate business days between D3 and D1
            group.loc[:, 'Net_Workdays'] = np.busday_count(group['D1'].values, 
                                                          group['D3'].values) 
        else:
            for i, row in group.iloc[:-1].iterrows(): 
                # For all rows except the last, calculate business days between current row's D2 and next row's D2
                next_row_d2 = group.loc[group.index[i+1], 'D2']
                group.loc[i, 'Net_Workdays'] = np.busday_count(row['D2'].values, 
                                                              next_row_d2.values) 
            # For the last row, calculate business days between D2 and D3
            last_row_idx = group.index[-1]
            group.loc[last_row_idx, 'Net_Workdays'] = np.busday_count(group.loc[last_row_idx, 'D2'].values, 
                                                                    group.loc[last_row_idx, 'D3'].values) 

    return df

# Example Usage:
# Assuming 'D1', 'D2', and 'D3' are datetime columns in your DataFrame
df = pd.DataFrame({
    'K1': ['A', 'A', 'A', 'B', 'B'],
    'K2': ['X', 'X', 'X', 'Y', 'Y'],
    'D1': pd.to_datetime(['2024-01-01', '2024-01-01', '2024-01-01', '2024-02-01', '2024-02-01']),
    'D2': pd.to_datetime(['2024-01-05', '2024-01-10', '2024-01-15', '2024-02-05', '2024-02-10']),
    'D3': pd.to_datetime(['2024-01-20', '2024-01-20', '2024-01-20', '2024-02-20', '2024-02-20'])
})

df = calculate_net_workdays_numpy(df)
print(df)

Key Changes:
 * Function Name: Changed to calculate_net_workdays_numpy() for clarity.
 * Calculation Logic:
   * Replaced (date2 - date1).days with np.busday_count(date1.values, date2.values). This utilizes the np.busday_count function from NumPy to directly count the number of business days between two dates.
This code effectively calculates net workdays using NumPy's busday_count function, providing a more concise and potentially faster solution for specific use cases.
Note:
 * This code assumes that 'D1', 'D2', and 'D3' are datetime columns in your DataFrame.
 * The DataFrame must be sorted by 'K1' and 'K2' before calling this function.
 * np.busday_count uses default business days (Monday to Friday) by default. You can customize the weekmask and holidays if needed using the busdaycalendar class in NumPy.
