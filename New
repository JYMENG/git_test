import csv
from datetime import datetime

# Define the input and output CSV file paths
input_file = 'input.csv'
output_file = 'output.csv'

# Define the input datetime format (dd-mmm-yy hh.mm.ss.123456789 AM/PM)
input_format = '%d-%b-%y %I.%M.%S.%f %p'

# Define the output datetime format (YYYY-MM-DD HH:MM:SS)
output_format = '%Y-%m-%d %H:%M:%S'

# Open the input CSV file for reading and the output file for writing
with open(input_file, 'r', newline='', encoding='utf-8') as infile, \
     open(output_file, 'w', newline='', encoding='utf-8') as outfile:

    # Create CSV reader and writer
    reader = csv.DictReader(infile)
    fieldnames = reader.fieldnames  # Get the header (field names)
    writer = csv.DictWriter(outfile, fieldnames=fieldnames)
    
    # Write the header to the output CSV
    writer.writeheader()

    # Process each row in the CSV
    for row in reader:
        # Get the original datetime string
        original_datetime = row['date_column']  # Replace 'date_column' with your actual column name

        # Parse the original datetime string to a datetime object
        try:
            parsed_datetime = datetime.strptime(original_datetime, input_format)
            # Convert the datetime object to the desired format
            formatted_datetime = parsed_datetime.strftime(output_format)

            # Update the row with the converted datetime
            row['date_column'] = formatted_datetime

        except ValueError as e:
            print(f"Error parsing datetime for row: {row}, error: {e}")

        # Write the updated row to the output CSV
        writer.writerow(row)

print(f"Processed file saved as {output_file}")