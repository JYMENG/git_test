Import-Module ActiveDirectory
Import-Module ImportExcel

$groups = Import-Excel -Path "groups.xlsx"
$allUsers = @()

function Expand-ADGroupMembers {
    param (
        [string]$CurrentGroupDN,
        [string]$Server,
        [string]$RootGroup,
        [string]$ParentGroup,
        [hashtable]$seenGroups
    )

    if ($seenGroups.ContainsKey($CurrentGroupDN)) { return }
    $seenGroups[$CurrentGroupDN] = $true

    # Get group's member attribute directly
    try {
        $groupObj = Get-ADObject -Identity $CurrentGroupDN -Server $Server -Properties member -ErrorAction Stop
    } catch {
        $allUsers += [PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = $CurrentGroupDN
            ObjectClass       = 'group'
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $CurrentGroupDN
            Note              = "‚ùå Cannot get group object"
        }
        return
    }

    foreach ($memberDN in $groupObj.member) {
        # Try to get the object's class first
        $entry = [PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = ''
            ObjectClass       = ''
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $memberDN
            Note              = ''
        }

        try {
            $obj = Get-ADObject -Identity $memberDN -Server $Server -Properties objectClass -ErrorAction Stop
            $objectClass = $obj.objectClass[-1]
            $entry.ObjectClass = $objectClass
            $entry.Name = $obj.Name
        } catch {
            $entry.Note = "‚ö†Ô∏è Broken or external object"
            $allUsers += $entry
            continue
        }

        switch ($objectClass) {
            'user' {
                try {
                    $user = Get-ADUser -Identity $memberDN -Server $Server -Properties EmailAddress
                    $entry.SamAccountName = $user.SamAccountName
                    $entry.Email = $user.EmailAddress
                } catch {
                    $entry.Note = "‚ö†Ô∏è Cannot resolve user"
                }
                $allUsers += $entry
            }

            'group' {
                $entry.Note = "‚úÖ Nested group discovered"
                $allUsers += $entry
                Expand-ADGroupMembers -CurrentGroupDN $memberDN -Server $Server -RootGroup $RootGroup -ParentGroup $obj.Name -seenGroups $seenGroups
            }

            default {
                $entry.Note = "‚ö†Ô∏è Unsupported object class: $objectClass"
                $allUsers += $entry
            }
        }
    }
}

# MAIN LOOP
foreach ($row in $groups) {
    $rootGroup = $row.GroupName
    $server = $row.Server

    if (-not $rootGroup -or -not $server) {
        Write-Warning "‚ö†Ô∏è Skipping row with missing GroupName or Server."
        continue
    }

    Write-Host "`nüîç Processing root group '$rootGroup' on server '$server'"

    try {
        $rootGroupObj = Get-ADGroup -Identity $rootGroup -Server $server -Properties DistinguishedName
        $rootGroupDN = $rootGroupObj.DistinguishedName
    } catch {
        Write-Warning "‚ùå Root group '$rootGroup' not found on server '$server'"
        continue
    }

    $seenGroups = @{}
    Expand-ADGroupMembers -CurrentGroupDN $rootGroupDN -Server $server -RootGroup $rootGroup -ParentGroup $rootGroup -seenGroups $seenGroups
}

# Export
$allUsers | Export-Csv -Path "AD_Users_Robust_WithNotes.csv" -NoTypeInformation
Write-Host "`n‚úÖ Export complete: AD_Users_Robust_WithNotes.csv"