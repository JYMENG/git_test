import sqlite3
import csv
import pandas as pd

# Step 1: Load the list of users from the Excel file
print("Loading user list from Excel file...")
user_list_df = pd.read_excel('user_list.xlsx')  # Replace with your actual Excel file path
user_list = set(user_list_df['user'].tolist())  # Use a set for fast membership testing
print(f"User list loaded. Total {len(user_list)} users.")

# Step 2: Create SQLite connection
print("Creating SQLite database connection...")
conn = sqlite3.connect('data.db')  # In-memory database or a file-based database
cursor = conn.cursor()

# Step 3: Read the CSV file to dynamically create the table schema based on headers
print("Reading CSV file and creating table schema...")
with open('large_data.csv', 'r', newline='', encoding='utf-8') as input_file:
    csv_reader = csv.DictReader(input_file)
    headers = csv_reader.fieldnames  # Get the headers from the CSV file
    
    # Debug: Print the headers
    print(f"CSV Headers: {headers}")

    # Dynamically create the CREATE TABLE SQL command with all columns as TEXT
    create_table_query = f"CREATE TABLE IF NOT EXISTS large_data ({', '.join([f'{header} TEXT' for header in headers])})"
    print(f"Creating table with query: {create_table_query}")
    
    # Create the table in SQLite
    cursor.execute(create_table_query)
    print("Table created (or already exists).")

    # Step 4: Insert data into the table, treating all columns as TEXT
    print("Inserting data into SQLite table...")
    rows = [tuple(row.values()) for row in csv_reader]  # Convert rows into tuples
    
    # Debug: Check the number of rows to insert
    print(f"Total rows to insert: {len(rows)}")
    
    cursor.executemany(f"INSERT INTO large_data ({', '.join(headers)}) VALUES ({', '.join(['?'] * len(headers))})", rows)
    conn.commit()
    print("Data inserted into SQLite table successfully.")

# Step 5: Query the database to filter by the user list
print("Querying database to filter rows by user list...")
query = f"SELECT * FROM large_data WHERE user IN ({','.join('?' for _ in user_list)})"
cursor.execute(query, tuple(user_list))

# Debug: Show the number of rows matching the user filter
filtered_rows = cursor.fetchall()
print(f"Total filtered rows: {len(filtered_rows)}")

# Step 6: Export the filtered data to a new CSV file
print("Exporting filtered data to 'filtered_data.csv'...")
with open('filtered_data.csv', 'w', newline='', encoding='utf-8') as output_file:
    csv_writer = csv.writer(output_file)
    csv_writer.writerow(headers)  # Write header
    csv_writer.writerows(filtered_rows)

print("Filtered data exported successfully to 'filtered_data.csv'.")

# Close the database connection
conn.close()
print("SQLite connection closed.")

print("Filtering complete.")