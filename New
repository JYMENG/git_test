import pandas as pd
import os
import time

def process_excel_folder(folder_path):
    """Processes all Excel files in a folder, excluding 'SQL' tabs, with debug info."""
    print(f"Starting to process folder: {folder_path}")
    all_data = []
    file_count = 0
    sheet_count = 0
    try:
        for filename in os.listdir(folder_path):
            if filename.endswith(('.xlsx', '.xls')):
                file_count += 1
                file_path = os.path.join(folder_path, filename)
                print(f"  Processing file: {filename}")
                try:
                    xls = pd.ExcelFile(file_path)
                    for sheet_name in xls.sheet_names:
                        if 'SQL' not in sheet_name.upper():
                            sheet_count += 1
                            print(f"    Reading sheet: {sheet_name}")
                            df = pd.read_excel(xls, sheet_name=sheet_name)
                            all_data.append(df)
                            print(f"      Sheet {sheet_name} read successfully. Shape: {df.shape}")
                        else:
                            print(f"    Skipping sheet: {sheet_name} (contains 'SQL')")
                except Exception as e:
                    print(f"  Error processing {filename}: {e}")
        print(f"Folder {folder_path} processed. {file_count} files, {sheet_count} sheets processed.")
        if all_data:
            print("  Concatenating sheets...")
            combined_df = pd.concat(all_data, ignore_index=True)
            print(f"  Combined data shape: {combined_df.shape}")
            return combined_df
        else:
            print(f"  No valid sheets found in {folder_path}.")
            return None
    except Exception as overall_error:
        print(f"Error processing folder {folder_path}: {overall_error}")
        return None

def process_user_data(user_id_file, file2, file1):
    """Processes user data, matches keys, and filters by user IDs, with debug info."""
    print("Starting to process user data...")
    try:
        print(f"  Reading user IDs from: {user_id_file}")
        user_ids = pd.read_csv(user_id_file, header=None).iloc[:, 0].tolist()
        print(f"  {len(user_ids)} user IDs read.")

        print(f"  Reading file2 data from: {file2}")
        file2_data = pd.read_excel(file2)
        print(f"  File2 data shape: {file2_data.shape}")

        print(f"  Reading file1 data from: {file1}")
        file1_data = pd.read_excel(file1)
        print(f"  File1 data shape: {file1_data.shape}")

        print("  Merging file1 and file2 based on keys...")
        merged_data = pd.merge(file1_data, file2_data, left_on='Key2', right_on='Key1', how='inner')
        print(f"  Merged data shape: {merged_data.shape}")

        print("  Filtering merged data by user IDs...")
        filtered_data = merged_data[merged_data['User ID'].isin(user_ids)]
        print(f"  Filtered data shape: {filtered_data.shape}")

        print("  User data processing complete.")
        return filtered_data
    except Exception as e:
        print(f"  Error processing user data: {e}")
        return None

# 1. Process Excel Folders
start_time = time.time()
print("Starting folder processing...")
folder1_data = process_excel_folder('Folder1')
folder2_data = process_excel_folder('Folder2')
print(f"Folder processing completed in {time.time() - start_time:.2f} seconds.")

# 2. Process User Data and Merge
start_time = time.time()
print("Starting user data processing...")
user_data = process_user_data('user_ids.csv', 'file2.xlsx', 'file1.xlsx')
print(f"User data processing completed in {time.time() - start_time:.2f} seconds.")

# 3. Output Results (Optional)
if folder1_data is not None:
    print("Saving merged folder1 data...")
    folder1_data.to_csv('merged_folder1_data.csv', index=False)
    print("Merged folder1 data saved.")
if folder2_data is not None:
    print("Saving merged folder2 data...")
    folder2_data.to_csv('merged_folder2_data.csv', index=False)
    print("Merged folder2 data saved.")
if user_data is not None:
    print("Saving final output data...")
    user_data.to_csv('final_output.csv', index=False)
    print("Final output data saved.")

print("All processing complete.")