import sqlite3
import openpyxl
import os

# Paths to your folders and user ID file
folder1_path = "path/to/folder1"
folder2_path = "path/to/folder2"
user_id_file = "path/to/user_ids.xlsx"

# Connect to a file-based SQLite database
db_file = "large_data.db"
if os.path.exists(db_file):
    os.remove(db_file)  # Clean start; remove if you want to append
conn = sqlite3.connect(db_file)
cursor = conn.cursor()

# Function to create table dynamically based on first sheet headers
def create_table_from_headers(file_path, table_name):
    wb = openpyxl.load_workbook(file_path, read_only=True)
    first_sheet = wb.sheetnames[0]
    sheet = wb[first_sheet]
    headers = [cell.value for cell in next(sheet.rows) if cell.value]  # First row as headers
    wb.close()
    
    # Create table with all columns as TEXT
    columns = ", ".join([f'"{h}" TEXT' for h in headers])
    cursor.execute(f"CREATE TABLE IF NOT EXISTS {table_name} ({columns})")
    return headers

# Function to process a folder and insert rows incrementally
def process_folder(folder_path, table_name):
    headers = None
    for filename in os.listdir(folder_path):
        if filename.endswith(".xlsx"):
            file_path = os.path.join(folder_path, filename)
            wb = openpyxl.load_workbook(file_path, read_only=True)
            
            # Set headers from first sheet of first file
            if not headers:
                headers = create_table_from_headers(file_path, table_name)
            
            for sheet_name in wb.sheetnames:
                if "SQL" in sheet_name:
                    continue
                sheet = wb[sheet_name]
                for i, row in enumerate(sheet.rows):
                    if i == 0 and sheet_name == wb.sheetnames[0]:  # Skip header row of first sheet
                        continue
                    values = [cell.value for cell in row][:len(headers)]
                    if len(values) < len(headers):
                        values.extend([None] * (len(headers) - len(values)))
                    placeholders = ",".join(["?" for _ in headers])
                    cursor.execute(f"INSERT INTO {table_name} VALUES ({placeholders})", values)
            wb.close()
    conn.commit()
    return headers  # Return headers for inspection

# Process both folders and get headers
headers1 = process_folder(folder1_path, "table1")
headers2 = process_folder(folder2_path, "table2")

# Inspect headers and a few rows
def inspect_table(table_name, headers):
    print(f"\nInspecting {table_name}:")
    print("Headers:", headers)
    cursor.execute(f"SELECT * FROM {table_name} LIMIT 5")
    rows = cursor.fetchall()
    for i, row in enumerate(rows):
        print(f"Row {i + 1}:", row)

inspect_table("table1", headers1)
inspect_table("table2", headers2)

# Load user IDs incrementally
wb = openpyxl.load_workbook(user_id_file, read_only=True)
sheet = wb[wb.sheetnames[0]]
user_ids = [row[0].value for row in sheet.rows if row[0].value]
wb.close()

# Perform LEFT JOIN and filter (use actual column names after inspection)
query = f"""
CREATE TABLE merged_result AS
SELECT t1.*, t2.*
FROM table1 t1
LEFT JOIN table2 t2
ON t1."key_column1" = t2."key_column2"
WHERE t1."user_id" IN ({','.join(['?' for _ in user_ids])})
"""
try:
    cursor.execute(query, user_ids)
    conn.commit()
except sqlite3.OperationalError as e:
    print(f"Error during JOIN: {e}")
    print("Check if 'key_column1', 'key_column2', and 'user_id' match the headers above.")

# Export result to CSV
cursor.execute("SELECT * FROM merged_result")
with open("merged_filtered_result.csv", "w", encoding="utf-8") as f:
    headers = [desc[0] for desc in cursor.description]
    f.write(",".join(headers) + "\n")
    for row in cursor:
        f.write(",".join([str(val or "") for val in row]) + "\n")

# Clean up
conn.close()

print("Merging, joining, and filtering complete. Result saved to 'merged_filtered_result.csv'.")