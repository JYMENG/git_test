param (
    [string]$InputFile = "C:\Path\To\Your\Groups.xlsx",
    [string]$OutputFile = "C:\Temp\Members_WithPaths.csv"
)

# Ensure Excel import module exists
if (-not (Get-Module -ListAvailable -Name ImportExcel)) {
    Write-Error "ImportExcel module is required. Run: Install-Module ImportExcel"
    return
}

# Read Excel
if (-not (Test-Path $InputFile)) {
    Write-Error "Input file does not exist: $InputFile"
    return
}

$groupList = Import-Excel -Path $InputFile

if ($groupList.Count -eq 0) {
    Write-Error "Excel file has no rows"
    return
}

# Recursive member function
function Get-ADGroupRecursiveMembers {
    param (
        [string]$GroupDN,
        [string]$Server,
        [System.Collections.Generic.HashSet[string]]$VisitedGroups,
        [string[]]$PathSoFar
    )

    $results = @()

    if ($VisitedGroups.Contains($GroupDN)) {
        return $results
    }

    $VisitedGroups.Add($GroupDN)

    try {
        $group = Get-ADGroup -Identity $GroupDN -Server $Server -Properties Members
    } catch {
        Write-Warning "Failed to load group: $GroupDN - $_"
        return $results
    }

    foreach ($memberDN in $group.Members) {
        try {
            $member = Get-ADObject -Identity $memberDN -Server $Server -Properties objectClass, sAMAccountName, mail
        } catch {
            Write-Warning "Skipping inaccessible member: $memberDN"
            continue
        }

        if ($member.objectClass -eq "group") {
            $nestedResults = Get-ADGroupRecursiveMembers -GroupDN $memberDN -Server $Server -VisitedGroups $VisitedGroups -PathSoFar ($PathSoFar + $GroupDN)
            $results += $nestedResults
        } elseif ($member.objectClass -eq "foreignSecurityPrincipal") {
            $results += [pscustomobject]@{
                GroupPath      = ($PathSoFar + $GroupDN) -join " -> "
                MemberDN       = $memberDN
                ObjectType     = "FSP"
                sAMAccountName = $null
                Email          = $null
            }
        } else {
            $results += [pscustomobject]@{
                GroupPath      = ($PathSoFar + $GroupDN) -join " -> "
                MemberDN       = $memberDN
                ObjectType     = $member.objectClass
                sAMAccountName = $member.sAMAccountName
                Email          = $member.mail
            }
        }
    }

    return $results
}

# Main result list
$allResults = @()

foreach ($row in $groupList) {
    $groupName = $row.GroupName
    $serverName = $row.ServerName

    if (-not $groupName -or -not $serverName) {
        Write-Warning "Skipping row with missing group or server"
        continue
    }

    try {
        $rootGroup = Get-ADGroup -Identity $groupName -Server $serverName
        $visited = New-Object 'System.Collections.Generic.HashSet[string]'
        $members = Get-ADGroupRecursiveMembers -GroupDN $rootGroup.DistinguishedName -Server $serverName -VisitedGroups $visited -PathSoFar @()
        
        if ($members.Count -gt 0) {
            $allResults += $members
            Write-Host "‚úÖ Group '$groupName' returned $($members.Count) members"
        } else {
            Write-Warning "‚ö† Group '$groupName' had no members"
        }
    } catch {
        Write-Warning "‚ùå Failed to load group: $groupName from $Write-Host "üì¶ Previewing first item:"
$first = $allResults | Select-Object -First 1
$first | Format-List
$first.GetType().FullName

# Export result
if ($allResults.Count -gt 0) {
    $allResults | Export-Csv -Path $OutputFile -NoTypeInformation -Encoding UTF8
    Write-Host "üìÑ Exported results to: $OutputFile"
} else {
    Write-Warning "‚ö† No results to $allResults.Count
$allResults | Format-Table -AutoSize
$allResults | Export-Csv -Path "C:\Temp\Test_Export.csv" -NoTypeInformation -Encoding UTF8
Start-Process "C:\Temp\Test_Export.csv"

}