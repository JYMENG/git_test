import os
import sqlite3
import pandas as pd

# Define folders and file paths
folder1 = "path/to/folder1"
folder2 = "path/to/folder2"
user_file = "path/to/user_file.xlsx"

# Initialize SQLite
conn = sqlite3.connect(":memory:")
cursor = conn.cursor()

def debug(msg):
    """Print debug messages."""
    print(f"[DEBUG] {msg}")

def read_excel_sheets(folder, table_name):
    """Reads all Excel sheets from files in a folder, excluding sheets with 'SQL' in the name."""
    all_data = []
    
    for file in os.listdir(folder):
        file_path = os.path.join(folder, file)
        if file.endswith(".xlsx") or file.endswith(".xls"):
            debug(f"Reading file: {file}")
            try:
                sheets = pd.read_excel(file_path, sheet_name=None, engine="openpyxl")  # Load all sheets
                
                for sheet_name, df in sheets.items():
                    if "SQL" in sheet_name:
                        debug(f"Skipping sheet '{sheet_name}' in {file} (contains 'SQL')")
                        continue

                    if not df.empty:
                        df["source_file"] = file
                        df["source_sheet"] = sheet_name
                        all_data.append(df)
                        debug(f"Loaded sheet '{sheet_name}' from {file}, rows: {len(df)}")
            except Exception as e:
                debug(f"Error reading {file}: {e}")
    
    if all_data:
        final_df = pd.concat(all_data, ignore_index=True)
        final_df.to_sql(table_name, conn, if_exists="replace", index=False)
        debug(f"Inserted {len(final_df)} rows into {table_name}")
    else:
        debug(f"No valid data found in {folder}")

# Process both folders
read_excel_sheets(folder1, "table1")
read_excel_sheets(folder2, "table2")

# Load user file
try:
    user_df = pd.read_excel(user_file, sheet_name=None, engine="openpyxl")
    user_data = None
    for sheet_name, df in user_df.items():
        if not df.empty:
            user_data = df
            break  # Assume first non-empty sheet is correct
    if user_data is not None:
        user_data.to_sql("user_table", conn, if_exists="replace", index=False)
        debug(f"User data loaded with {len(user_data)} rows")
    else:
        debug("No valid user data found")
except Exception as e:
    debug(f"Error reading user file: {e}")

# Query matching records
query = """
SELECT t2.[user name], t1.k2 
FROM table1 t1
JOIN table2 t2 ON t1.k2 = t2.k1
WHERE t2.[user name] IN (SELECT user_id FROM user_table)
"""
try:
    result_df = pd.read_sql(query, conn)
    debug(f"Query executed, retrieved {len(result_df)} matching records")
    print(result_df)
except Exception as e:
    debug(f"Query execution error: {e}")

# Cleanup
conn.close()
debug("SQLite connection closed.")