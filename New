import csv
from datetime import datetime

# Input and output file paths
input_file = "your_large_file.csv"
output_file = "processed_file.csv"

# Define key columns and datetime column
key_columns = ['ID', 'Sub ID']  # Replace with your key column names
datetime_column = 'datetime_column'  # Replace with your datetime column name

# A dictionary to store the smallest datetime for each key
seen = {}

# Process the file row by row
with open(input_file, mode='r', newline='', encoding='utf-8') as infile, \
     open(output_file, mode='w', newline='', encoding='utf-8') as outfile:
    
    reader = csv.DictReader(infile)
    fieldnames = reader.fieldnames
    writer = csv.DictWriter(outfile, fieldnames=fieldnames)
    
    # Write the header to the output file
    writer.writeheader()
    
    for row in reader:
        # Create a unique key based on the specified columns
        key = tuple(row[col] for col in key_columns)
        
        # Parse the datetime column
        row_datetime = datetime.strptime(row[datetime_column], '%Y-%m-%d %H:%M:%S')  # Adjust format if needed
        
        # Check if the key has been seen and compare the datetime
        if key not in seen or row_datetime < seen[key][datetime_column]:
            seen[key] = row
    
    # Write the unique rows sorted by datetime to the output file
    for row in sorted(seen.values(), key=lambda x: datetime.strptime(x[datetime_column], '%Y-%m-%d %H:%M:%S')):
        writer.writerow(row)

print(f"Processed file saved to: {output_file}")