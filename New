# CONFIGURATION
$GroupName = "Hr Team"
$Server = "yourdc.domain.com"
$OutputFile = "C:\Temp\AD_Export.csv"

# FUNCTION
function Get-ADGroupRecursiveMembers {
    param (
        [string]$GroupDN,
        [string]$Server,
        [System.Collections.Generic.HashSet[string]]$VisitedGroups,
        [string[]]$PathSoFar
    )

    $results = @()

    if ($VisitedGroups.Contains($GroupDN)) {
        return $results
    }

    $VisitedGroups.Add($GroupDN)

    try {
        $group = Get-ADGroup -Identity $GroupDN -Server $Server -Properties Members
    } catch {
        Write-Warning "Failed to access group: $GroupDN"
        return $results
    }

    foreach ($memberDN in $group.Members) {
        try {
            $member = Get-ADObject -Identity $memberDN -Server $Server -Properties objectClass, sAMAccountName, mail
        } catch {
            Write-Warning "Skipping member: $memberDN"
            continue
        }

        if ($member.objectClass -eq "group") {
            $nested = Get-ADGroupRecursiveMembers -GroupDN $memberDN -Server $Server -VisitedGroups $VisitedGroups -PathSoFar ($PathSoFar + $GroupDN)
            if ($nested) { $results += $nested }
        } elseif ($member.objectClass -eq "foreignSecurityPrincipal") {
            $results += [PSCustomObject]@{
                GroupPath      = ($PathSoFar + $GroupDN) -join " -> "
                MemberDN       = $memberDN
                ObjectType     = "FSP"
                sAMAccountName = ""
                Email          = ""
            }
        } else {
            $results += [PSCustomObject]@{
                GroupPath      = ($PathSoFar + $GroupDN) -join " -> "
                MemberDN       = $memberDN
                ObjectType     = $member.objectClass
                sAMAccountName = $member.sAMAccountName
                Email          = $member.mail
            }
        }
    }

    return $results
}

# MAIN
try {
    $rootGroup = Get-ADGroup -Identity $GroupName -Server $Server
    $visited = [System.Collections.Generic.HashSet[string]]::new()
    $results = Get-ADGroupRecursiveMembers -GroupDN $rootGroup.DistinguishedName -Server $Server -VisitedGroups $visited -PathSoFar @()

    Write-Host "`nâœ… Total members: $($results.Count)"
    
    # Confirm structure
    $results[0] | Format-List
    $results[0] | Get-Member

    # Export safely
    if ($results.Count -gt 0) {
        Remove-Item $OutputFile -ErrorAction SilentlyContinue
        $results | Export-Csv -Path $OutputFile -NoTypeInformation -Encoding UTF8
        Write-Host "`nðŸ“„ Export complete: $OutputFile"
        Start-Process $OutputFile
    } else {
        Write-Warning "No members to export"
    }

} catch {
    Write-Error "Fatal error: $_"
}