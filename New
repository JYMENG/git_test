import pandas as pd
import glob
import os
from tqdm import tqdm  # For progress monitoring

def optimized_read_folder(folder_path, exclude_tab='SQL', chunksize=10000):
    """Memory-efficient folder reading with chunk processing"""
    all_files = glob.glob(os.path.join(folder_path, "*.xlsx"))
    dfs = []

    for file in tqdm(all_files, desc="Processing Files"):
        xls = pd.ExcelFile(file)
        for sheet_name in xls.sheet_names:
            if exclude_tab.lower() in sheet_name.lower():
                continue
                
            # Read only necessary columns upfront
            usecols = ['k2'] if 'folder1' in folder_path else ['key1', 'user_name']
            df_chunks = pd.read_excel(
                file,
                sheet_name=sheet_name,
                usecols=usecols,
                engine='openpyxl',
                dtype={'k2': 'category', 'key1': 'category', 'user_name': 'category'},
                chunksize=chunksize
            )
            
            for chunk in df_chunks:
                # Perform early filtering and type conversion
                chunk = chunk.dropna(subset=usecols)
                dfs.append(chunk)

    return pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()

# Configuration (update these paths)
PATHS = {
    'folder1': '/path/to/folder1',
    'folder2': '/path/to/folder2',
    'file3': '/path/to/user_ids.xlsx'
}

# Read data with optimized parameters
print("Loading Folder1 data...")
df_folder1 = optimized_read_folder(PATHS['folder1'])

print("\nLoading Folder2 data...")
df_folder2 = optimized_read_folder(PATHS['folder2'])

print("\nLoading User IDs...")
user_ids = pd.read_excel(PATHS['file3'], usecols=['user_id'], dtype={'user_id': 'category'})

# Memory-efficient merge
print("\nMerging datasets...")
merged = pd.merge(
    df_folder1[['k2']],
    df_folder2[['key1', 'user_name']],
    left_on='k2',
    right_on='key1',
    how='inner',
    validate='one_to_one'  # Ensure expected relationship
).drop_duplicates()

# Final filtering
print("Filtering results...")
final_output = merged[merged['key1'].isin(user_ids['user_id'])][['k2', 'user_name']]

# Save memory by converting to optimal types
final_output = final_output.astype({
    'k2': 'category',
    'user_name': 'category'
})

print("\nFinal output preview:")
print(final_output.head())

# To save efficiently
final_output.to_parquet('final_output.parquet')  # More efficient than CSV