Import-Module ActiveDirectory
Import-Module ImportExcel

$groups = Import-Excel -Path "groups.xlsx"
$allMembers = @()

function Expand-ADGroup {
    param (
        [string]$GroupDN,
        [string]$Server,
        [string]$RootGroup,
        [string]$ParentGroup,
        [hashtable]$seenGroups
    )

    if ($seenGroups.ContainsKey($GroupDN)) { return }
    $seenGroups[$GroupDN] = $true

    $groupObj = Get-ADObject -Identity "$GroupDN" -Server $Server -Properties member -ErrorAction SilentlyContinue

    if (-not $groupObj) {
        $allMembers += ,([PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = $GroupDN
            ObjectClass       = 'group'
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $GroupDN
            Note              = "‚ùå Cannot read group object"
        })
        return
    }

    foreach ($memberDN in $groupObj.member) {
        $entry = [PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = ''
            ObjectClass       = ''
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $memberDN
            Note              = ''
        }

        # Determine actual object type
        if (Get-ADUser -Identity "$memberDN" -Server $Server -ErrorAction SilentlyContinue) {
            $entry.ObjectClass = 'user'
            $user = Get-ADUser -Identity "$memberDN" -Server $Server -Properties SamAccountName, EmailAddress -ErrorAction SilentlyContinue
            if ($user) {
                $entry.Name = $user.Name
                $entry.SamAccountName = $user.SamAccountName
                $entry.Email = $user.EmailAddress
            } else {
                $entry.Note = "‚ö†Ô∏è Could not retrieve user details"
            }
            $allMembers += ,$entry
        }
        elseif (Get-ADGroup -Identity "$memberDN" -Server $Server -ErrorAction SilentlyContinue) {
            $entry.ObjectClass = 'group'
            $group = Get-ADGroup -Identity "$memberDN" -Server $Server -ErrorAction SilentlyContinue
            $entry.Name = $group.Name
            $entry.Note = "‚úÖ Nested group"
            $allMembers += ,$entry

            # Recurse
            Expand-ADGroup -GroupDN "$memberDN" -Server $Server -RootGroup $RootGroup -ParentGroup $group.Name -seenGroups $seenGroups
        }
        else {
            # ForeignSecurityPrincipal or unknown object
            $obj = Get-ADObject -Identity "$memberDN" -Server $Server -Properties Name -ErrorAction SilentlyContinue
            if ($obj) {
                $entry.Name = $obj.Name
            }
            $entry.ObjectClass = 'other'
            $entry.Note = "‚ö†Ô∏è Unclassified or external object"
            $allMembers += ,$entry
        }
    }
}

# MAIN LOOP
foreach ($row in $groups) {
    $groupName = $row.GroupName
    $server = $row.Server

    if (-not $groupName -or -not $server) {
        Write-Warning "‚ö†Ô∏è Skipping row with missing GroupName or Server"
        continue
    }

    Write-Host "`nüîç Resolving group '$groupName' on server '$server'..."

    $resolved = Get-ADGroup -Identity "$groupName" -Server $server -Properties DistinguishedName -ErrorAction SilentlyContinue

    if (-not $resolved) {
        Write-Warning "‚ùå Could not resolve group '$groupName' on '$server'"
        continue
    }

    $groupDN = $resolved.DistinguishedName
    Write-Host "‚û°Ô∏è  Resolved to DN: $groupDN"

    $seenGroups = @{}
    Expand-ADGroup -GroupDN "$groupDN" -Server $server -RootGroup $groupName -ParentGroup $groupName -seenGroups $seenGroups
}

# Export results
$allMembers | Export-Csv -Path "AD_Recursive_Members_Final.csv" -NoTypeInformation
Write-Host "`n‚úÖ Export complete: AD_Recursive_Members_Final.csv"