Import-Module ActiveDirectory
Import-Module ImportExcel

# Load Excel with columns: GroupName | Server
$groups = Import-Excel -Path "groups.xlsx"
$allUsers = @()

# Recursive function
function Get-GroupUsersRecursive {
    param (
        [string]$CurrentGroup,
        [string]$Server,
        [hashtable]$seenGroups,
        [string]$ParentGroup
    )

    if ($seenGroups.ContainsKey($CurrentGroup)) { return }
    $seenGroups[$CurrentGroup] = $true

    try {
        $members = Get-ADGroupMember -Identity $CurrentGroup -Server $Server -ErrorAction Stop
    } catch {
        Write-Warning "‚ùå Cannot get members of group '$CurrentGroup' on server '$Server': $_"
        return  # skip this group, but don't stop outer loop
    }

    foreach ($member in $members) {
        $dn = $member.DistinguishedName
        $entry = [PSCustomObject]@{
            RootGroup         = $ParentGroup
            ParentGroup       = $CurrentGroup
            Server            = $Server
            Name              = $member.Name
            ObjectClass       = $member.ObjectClass
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $dn
            Note              = ''
        }

        # Skip invalid/foreign/trusted objects
        if ($dn -like '*CN=ForeignSecurityPrincipals*') {
            $entry.Note = "‚ö†Ô∏è ForeignSecurityPrincipal - external/trusted object"
            $script:allUsers += $entry
            continue
        }

        if ($member.objectClass -eq 'user') {
            try {
                $user = Get-ADUser -Identity $dn -Server $Server -Properties EmailAddress
                $entry.SamAccountName = $user.SamAccountName
                $entry.Email = $user.EmailAddress
            } catch {
                $entry.Note = "‚ö†Ô∏è Cannot resolve user"
            }
            $script:allUsers += $entry
        }
        elseif ($member.objectClass -eq 'group') {
            try {
                # Log the group itself
                $entry.Note = "‚úÖ Nested group processed"
                $script:allUsers += $entry

                # Recurse into the nested group
                Get-GroupUsersRecursive -CurrentGroup $member.Name -Server $Server -seenGroups $seenGroups -ParentGroup $CurrentGroup
            } catch {
                $entry.Note = "‚ö†Ô∏è Cannot access nested group"
                $script:allUsers += $entry
                continue
            }
        }
        else {
            $entry.Note = "‚ö†Ô∏è Unsupported object class: $($member.objectClass)"
            $script:allUsers += $entry
        }
    }
}

# Loop through root groups in Excel
foreach ($row in $groups) {
    $rootGroup = $row.GroupName
    $server = $row.Server

    if (-not $rootGroup -or -not $server) {
        Write-Warning "‚ö†Ô∏è Skipping row with missing GroupName or Server."
        continue
    }

    Write-Host "üîç Processing group '$rootGroup' on server '$server'"

    $seenGroups = @{}
    Get-GroupUsersRecursive -CurrentGroup $rootGroup -Server $server -seenGroups $seenGroups -ParentGroup $rootGroup
}

# Export to CSV
$allUsers | Export-Csv -Path "AD_Users_Recursive_WithNotes.csv" -NoTypeInformation
Write-Host "‚úÖ Export complete: AD_Users_Recursive_WithNotes.csv"