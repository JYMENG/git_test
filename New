# Configuration
$GroupName = "Hr Team"
$Server = "yourdc.domain.com"
$OutputFile = "C:\Temp\AD_Export.csv"

# Recursive function using a safe collector
function Get-GroupMembersSafe {
    param (
        [string]$GroupDN,
        [string]$Server,
        [System.Collections.Generic.HashSet[string]]$Visited,
        [string[]]$PathSoFar,
        [System.Collections.Generic.List[object]]$Collector
    )

    if ($Visited.Contains($GroupDN)) {
        return
    }

    $Visited.Add($GroupDN)

    try {
        $group = Get-ADGroup -Identity $GroupDN -Server $Server -Properties Members
    } catch {
        Write-Warning "Cannot access group: $GroupDN"
        return
    }

    foreach ($memberDN in $group.Members) {
        try {
            $member = Get-ADObject -Identity $memberDN -Server $Server -Properties objectClass, sAMAccountName, mail
        } catch {
            Write-Warning "Cannot access member: $memberDN"
            continue
        }

        if ($member.objectClass -eq "group") {
            Get-GroupMembersSafe -GroupDN $memberDN -Server $Server -Visited $Visited -PathSoFar ($PathSoFar + $GroupDN) -Collector $Collector
        } elseif ($member.objectClass -eq "foreignSecurityPrincipal") {
            $Collector.Add([PSCustomObject]@{
                GroupPath      = ($PathSoFar + $GroupDN) -join " -> "
                MemberDN       = $memberDN
                ObjectType     = "FSP"
                sAMAccountName = ""
                Email          = ""
            })
        } else {
            $Collector.Add([PSCustomObject]@{
                GroupPath      = ($PathSoFar + $GroupDN) -join " -> "
                MemberDN       = $memberDN
                ObjectType     = $member.objectClass
                sAMAccountName = $member.sAMAccountName
                Email          = $member.mail
            })
        }
    }
}

# Main execution
try {
    $rootGroup = Get-ADGroup -Identity $GroupName -Server $Server
    $visited = [System.Collections.Generic.HashSet[string]]::new()
    $collected = [System.Collections.Generic.List[object]]::new()

    Get-GroupMembersSafe -GroupDN $rootGroup.DistinguishedName -Server $Server -Visited $visited -PathSoFar @() -Collector $collected

    $collected[0] | Format-List
    $collected[0].GetType().FullName

    if ($collected.Count -gt 0) {
        Remove-Item $OutputFile -ErrorAction SilentlyContinue
        $collected | Export-Csv -Path $OutputFile -NoTypeInformation -Encoding UTF8
        Write-Host "Exported to: $OutputFile"
        Start-Process $OutputFile
    } else {
        Write-Warning "No members found."
    }

} catch {
    Write-Error "Fatal error: $_"
}