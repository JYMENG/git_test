import pandas as pd
import sqlite3
import os

# Paths to your folders and user ID file
folder1_path = "path/to/folder1"
folder2_path = "path/to/folder2"
user_id_file = "path/to/user_ids.xlsx"

# Connect to an in-memory SQLite database
conn = sqlite3.connect(":memory:")

# Function to process a folder and merge its Excel files into a table
def process_folder(folder_path, table_name):
    all_data = []
    for filename in os.listdir(folder_path):
        if filename.endswith(".xlsx"):
            file_path = os.path.join(folder_path, filename)
            # Load Excel file and get sheet names
            xl = pd.ExcelFile(file_path)
            for sheet_name in xl.sheet_names:
                # Skip sheets with "SQL" in the name
                if "SQL" in sheet_name:
                    continue
                # Only process the first sheet with headers
                df = pd.read_excel(file_path, sheet_name=sheet_name, header=0 if xl.sheet_names[0] == sheet_name else None)
                all_data.append(df)
    
    # Concatenate all dataframes from the folder
    if all_data:
        merged_df = pd.concat(all_data, ignore_index=True)
        # Write to SQLite table
        merged_df.to_sql(table_name, conn, if_exists="replace", index=False)

# Process both folders
process_folder(folder1_path, "table1")
process_folder(folder2_path, "table2")

# Load user IDs from the Excel file (assuming single column in first sheet)
user_ids_df = pd.read_excel(user_id_file)
user_ids = tuple(user_ids_df.iloc[:, 0].tolist())  # Convert to tuple for SQL IN clause

# Perform LEFT JOIN
# Assume 'key_column1' in table1 and 'key_column2' in table2 are the join keys
# Replace these with your actual key column names
query = """
CREATE TABLE merged_result AS
SELECT t1.*, t2.*
FROM table1 t1
LEFT JOIN table2 t2
ON t1.key_column1 = t2.key_column2
WHERE t1.user_id IN ({})
""".format(",".join("?" * len(user_ids)))

# Execute the query with user IDs
conn.execute(query, user_ids)

# Fetch the result
result_df = pd.read_sql_query("SELECT * FROM merged_result", conn)

# Optional: Save the result to a file
result_df.to_excel("merged_filtered_result.xlsx", index=False)

# Close the connection
conn.close()

print("Merging, joining, and filtering complete. Result saved to 'merged_filtered_result.xlsx'.")