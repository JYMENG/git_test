Import-Module ActiveDirectory
Import-Module ImportExcel

$groups = Import-Excel -Path "groups.xlsx"
$allUsers = @()

function Get-GroupUsersRecursive {
    param (
        [string]$CurrentGroup,
        [string]$Server,
        [hashtable]$seenGroups,
        [string]$RootGroup,
        [string]$ParentGroup
    )

    if ($seenGroups.ContainsKey($CurrentGroup)) { return }
    $seenGroups[$CurrentGroup] = $true

    try {
        $members = Get-ADGroupMember -Identity $CurrentGroup -Server $Server -ErrorAction Stop
    } catch {
        $allUsers += [PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = $CurrentGroup
            ObjectClass       = "group"
            SamAccountName    = ""
            Email             = ""
            DistinguishedName = ""
            Note              = "‚ùå Cannot read group members"
        }
        return
    }

    foreach ($member in $members) {
        $entry = [PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $CurrentGroup
            Server            = $Server
            Name              = $member.Name
            ObjectClass       = $member.ObjectClass
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $member.DistinguishedName
            Note              = ''
        }

        $dn = $member.DistinguishedName

        # Handle foreign or broken objects
        if ($dn -like '*CN=ForeignSecurityPrincipals*') {
            $entry.Note = "‚ö†Ô∏è ForeignSecurityPrincipal - external/trusted object"
            $allUsers += $entry
            continue
        }

        switch ($member.objectClass) {
            'user' {
                try {
                    $user = Get-ADUser -Identity $dn -Server $Server -Properties EmailAddress
                    $entry.SamAccountName = $user.SamAccountName
                    $entry.Email = $user.EmailAddress
                } catch {
                    $entry.Note = "‚ö†Ô∏è Cannot resolve user"
                }
                $allUsers += $entry
            }

            'group' {
                # Log this group entry
                $entry.Note = "‚úÖ Nested group discovered"
                $allUsers += $entry

                # Recurse into it separately
                Get-GroupUsersRecursive -CurrentGroup $member.Name -Server $Server -seenGroups $seenGroups -RootGroup $RootGroup -ParentGroup $CurrentGroup
            }

            default {
                $entry.Note = "‚ö†Ô∏è Unsupported object class: $($member.objectClass)"
                $allUsers += $entry
            }
        }
    }
}

# Main loop for each root group in Excel
foreach ($row in $groups) {
    $rootGroup = $row.GroupName
    $server = $row.Server

    if (-not $rootGroup -or -not $server) {
        Write-Warning "‚ö†Ô∏è Skipping row with missing GroupName or Server."
        continue
    }

    Write-Host "`nüîç Processing root group '$rootGroup' on server '$server'"

    $seenGroups = @{}
    Get-GroupUsersRecursive -CurrentGroup $rootGroup -Server $server -seenGroups $seenGroups -RootGroup $rootGroup -ParentGroup $rootGroup
}

# Export to CSV
$allUsers | Export-Csv -Path "AD_Users_Recursive_WithNotes.csv" -NoTypeInformation
Write-Host "`n‚úÖ Export complete: AD_Users_Recursive_WithNotes.csv"