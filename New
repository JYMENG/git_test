import pandas as pd
import os
from pathlib import Path

def process_folder_chunks(folder_path, chunk_size=10000):
    """Process Excel files in folder in chunks"""
    all_files = [f for f in os.listdir(folder_path) if f.endswith(('.xlsx', '.xls'))]
    for filename in all_files:
        file_path = os.path.join(folder_path, filename)
        # Read in chunks
        for chunk in pd.read_excel(file_path, chunksize=chunk_size, dtype_backend='numpy_nullable'):
            yield chunk

def optimize_dtypes(df):
    """Optimize memory usage by converting to appropriate data types"""
    for col in df.columns:
        if df[col].dtype == 'float64':
            df[col] = pd.to_numeric(df[col], downcast='float')
        elif df[col].dtype == 'int64':
            df[col] = pd.to_numeric(df[col], downcast='integer')
        elif df[col].dtype == 'object':
            df[col] = df[col].astype('category')
    return df

# Set paths
folder1_path = 'path/to/folder1'
folder2_path = 'path/to/folder2'
scope_file_path = 'path/to/scope_ids.xlsx'
output_file = 'merged_filtered_output.xlsx'

# Read scope IDs (assuming this file is relatively small)
scope_ids = pd.read_excel(scope_file_path)
scope_id_list = set(scope_ids['ID'].tolist())  # Convert to set for faster lookup

# Process and merge in chunks
chunk_size = 10000  # Adjust based on your available memory
first_write = True

with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    for chunk1 in process_folder_chunks(folder1_path, chunk_size):
        chunk1 = optimize_dtypes(chunk1)
        
        for chunk2 in process_folder_chunks(folder2_path, chunk_size):
            chunk2 = optimize_dtypes(chunk2)
            
            # Merge chunks
            merged_chunk = pd.merge(chunk1, chunk2,
                                 on='ID',  # Replace with your key column
                                 how='inner')
            
            # Filter by scope IDs
            filtered_chunk = merged_chunk[merged_chunk['ID'].isin(scope_id_list)]
            
            # Write to file
            if not filtered_chunk.empty:
                if first_write:
                    filtered_chunk.to_excel(writer, index=False)
                    first_write = False
                else:
                    filtered_chunk.to_excel(writer, index=False, header=False, 
                                         mode='a', if_sheet_exists='overlay')

print(f"Processing complete. Output saved to {output_file}")

# Optional: Memory usage check
import sys
print(f"Scope IDs size: {sys.getsizeof(scope_id_list)/1024/1024:.2f} MB")