Import-Module ActiveDirectory
Import-Module ImportExcel

$groups = Import-Excel -Path "groups.xlsx"
$allUsers = @()

function Expand-ADGroupMembers {
    param (
        [string]$CurrentGroupDN,
        [string]$Server,
        [string]$RootGroup,
        [string]$ParentGroup,
        [hashtable]$seenGroups
    )

    if ($seenGroups.ContainsKey($CurrentGroupDN)) { return }
    $seenGroups[$CurrentGroupDN] = $true

    # Get group object and its members
    $groupObj = Get-ADObject -Identity $CurrentGroupDN -Server $Server -Properties member -ErrorAction Continue

    if (-not $groupObj) {
        $allUsers += ,([PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = $CurrentGroupDN
            ObjectClass       = 'group'
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $CurrentGroupDN
            Note              = "‚ùå Failed to get group object: $($Error[0].Exception.Message)"
        })
        return
    }

    foreach ($memberDN in $groupObj.member) {
        $entry = [PSCustomObject]@{
            RootGroup         = $RootGroup
            ParentGroup       = $ParentGroup
            Server            = $Server
            Name              = ''
            ObjectClass       = ''
            SamAccountName    = ''
            Email             = ''
            DistinguishedName = $memberDN
            Note              = ''
        }

        $obj = Get-ADObject -Identity $memberDN -Server $Server -Properties objectClass -ErrorAction Continue

        if (-not $obj) {
            $entry.Note = "‚ö†Ô∏è Cannot resolve member: $($Error[0].Exception.Message)"
            $allUsers += ,$entry
            continue
        }

        $objectClass = $obj.objectClass[-1]
        $entry.ObjectClass = $objectClass
        $entry.Name = $obj.Name

        switch ($objectClass) {
            'user' {
                $user = Get-ADUser -Identity $memberDN -Server $Server -Properties EmailAddress -ErrorAction Continue
                if ($user) {
                    $entry.SamAccountName = $user.SamAccountName
                    $entry.Email = $user.EmailAddress
                } else {
                    $entry.Note = "‚ö†Ô∏è Get-ADUser failed: $($Error[0].Exception.Message)"
                }
                $allUsers += ,$entry
            }

            'group' {
                $entry.Note = "‚úÖ Nested group"
                $allUsers += ,$entry
                Expand-ADGroupMembers -CurrentGroupDN $memberDN -Server $Server -RootGroup $RootGroup -ParentGroup $obj.Name -seenGroups $seenGroups
            }

            default {
                $entry.Note = "‚ö†Ô∏è Unknown object class: $objectClass"
                $allUsers += ,$entry
            }
        }
    }
}

# MAIN LOOP
foreach ($row in $groups) {
    $groupName = $row.GroupName
    $server = $row.Server

    if (-not $groupName -or -not $server) {
        Write-Warning "‚ö†Ô∏è Skipping row with missing GroupName or Server"
        continue
    }

    Write-Host "`nüîç Processing group '$groupName' on server '$server'..."

    # Resolve group to DN first
    $groupObj = Get-ADGroup -Identity $groupName -Server $server -Properties DistinguishedName -ErrorAction Continue

    if (-not $groupObj) {
        Write-Warning "‚ùå Could not resolve group '$groupName' to DN on $server"
        continue
    }

    $groupDN = $groupObj.DistinguishedName
    $seenGroups = @{}
    Expand-ADGroupMembers -CurrentGroupDN $groupDN -Server $server -RootGroup $groupName -ParentGroup $groupName -seenGroups $seenGroups
}

# Export final results
$allUsers | Export-Csv -Path "AD_Users_Recursive_Fixed.csv" -NoTypeInformation
Write-Host "`n‚úÖ Export complete: AD_Users_Recursive_Fixed.csv"